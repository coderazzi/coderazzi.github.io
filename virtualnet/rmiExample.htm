<!DOCTYPE html>
<html>
<head>
 <title>VirtualNet: network simulation with JavaRMI. RMI
 example</title>
 <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
 <link rel="stylesheet" type="text/css" href="../css/global.css">
 <meta name="Description" content="VirtualNet">
 <meta name="Keywords" content="java RMI network simulation">

 <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
 <link href="https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300;400;900&display=swap" rel="stylesheet">
 <link rel="stylesheet" type="text/css" href="../css/global.css">
 <link rel="stylesheet" type="text/css" href="../css/site.css">
 <link rel="stylesheet" type="text/css" href="../css/menu.css">
 <meta name="Author" content="Luis M. Pena">
 <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
 <div id="container">
  <div id="menu" class="wsmMenu"><div class="navcontainer"><ul class="navlist"><li class="group"><a href="../index.htm">Blog</a></li><li class="group"><a href="#" class="justtext">Java</a><ul class="navlist"><li><a href="../codeartifact-maven/index.htm">AWS+Maven</a></li><li class="group"><a href="../openapi4aws/index.htm">OpenAPI4AWS</a></li><li class="group"><a href="../tablefilter/index.html">Table filter</a></li><li><a href="../idldepend/index.htm">IdlDepend</a></li><li class="group"><a href="#" class="justtext">VirtualNet</a><ul class="navlist"><li><a href="index.htm">Overview</a></li><li><a href="availability.htm">Availability</a></li><li><a href="packages.htm">Packages</a></li><li><a href="interface.htm">Interface</a></li><li><a href="localExample.htm">Local example</a></li><li class="active"><a href="#">RMI example</a></li><li><a href="executables.htm">Executables</a></li><li><a href="versions.htm">Versions</a></li></ul></li><li><a href="../virtualnet2/index.htm">VirtualNet2</a></li><li><a href="../phd/index.htm">Sensei</a></li><li><a href="../cmdlinker/index.htm">CmdLinker</a></li><li><a href="../filesplit/index.htm">FileSplit</a></li><li><a href="../glassedpane/index.html">GlassedPane</a></li><li><a href="../menu/index.htm">Menu Applet</a></li><li><a href="../splitimage/index.htm">SplitImage</a></li></ul></li><li class="group"><a href="../python/djmovies/index.htm">python</a></li><li class="group"><a href="../csharp/xmlobjects/index.htm">c#</a></li><li class="group"><a href="../javascript/dominosa/dominosa.html">javascript</a></li><li class="group"><a href="../cloud/aws/mfa/index.html">net + cloud</a></li><li class="group"><a href="../linux/debian/troubleshooting.htm">Linux</a></li><li class="group"><a href="../misc/obsidian/obsidian.html">Misc</a></li><li class="group"><a href="../howto/osx/keyboard/index.html">MacOS</a></li><li class="group"><a href="../phd/index.htm">PhD</a></li><li class="group"><a href="../books/2017/index.htm">Just words</a></li></ul></div></div>
  <div id="body" class="wsmContent">
   <div id="header"><div>&nbsp;</div></div>
   <div id="content">

 <p class="timestamp">14th August 1997</p>  
 <h1>VirtualNet (over RMI)</h1>
 <h2>RMI example</h2>

 <ul type="square">
  <li><a href="#Server">Creating the server</a></li>

  <li><a href="#ServerApp">Generating servers</a></li>

  <li><a href="#ClientApp">Generating clients</a></li>

  <li><a href="#Execution">Executing the applications</a></li>

  <li><a href="#Download">Download the example</a></li>
 </ul>

 <h3><a name="Server" id="Server">Creating the server</a></h3>

 <p>The remote version of Virtual Net just need a RMI server; there
 are no special requirements of Virtual Net on the server.</p>

 <p>For this example, the server is going to give only one service:
 it returns a phone number, those used for its initialization.</p>

 <p>The code for this interface is:</p>
 <pre>
public interface PhoneNumbersIntf extends java.rmi.Remote
{
 public String getNumber() throws java.rmi.RemoteException;
}
</pre>

 <p>The code for the server is:</p>
 <pre>
public class PhoneNumbersServer extends java.rmi.server.UnicastRemoteObject 
  implements PhoneNumbersIntf
{
 public PhoneNumbersServer(String number)  throws java.rmi.RemoteException
 {
  Number=number;
 }
 public String getNumber() throws java.rmi.RemoteException
 {
  return Number;
 }
 String Number;
}
</pre>

 <h3><a name="ServerApp" id="ServerApp">Generating servers</a></h3>

 <p>The following is the code that generates several servers:</p>
 <pre>
import java.rmi.Naming;
          
import vnet.remote.Host;
          
public class InsertServers
{
 public static void main(String args[])
 {
  try
  {
   System.out.println("This test expects to have a virtualNet called "
    +"TestA, with 4 nodes C,M,U,Y, with links between C-M, M-U, V-Y");
   System.out.println();
   System.out.println("Getting the hosts...");
   Host C=(Host) Naming.lookup("/TestA/HostC");
   Host M=(Host) Naming.lookup("/TestA/HostM");
   Host U=(Host) Naming.lookup("/TestA/HostU");
   Host Y=(Host) Naming.lookup("/TestA/HostY");
   System.out.println("Binding the servers");
   System.out.println("In M there is a server called LMP");
   M.bind("LMP",new PhoneNumbersServer("763271"));
   System.out.println("In Y there is the same server ,but with a "+
    "different number");
   Y.bind("LMP",new PhoneNumbersServer("859829"));
   System.out.println("In C there is a server, hosted in U, called "+
    "BELLMP (/TestA/HostC/BELLMP");
   U.bind("/TestA/HostC/BELLMP", new PhoneNumbersServer("213207"));
   System.out.println();
   System.out.println();
   System.out.println("Ready");
  }
  catch(Exception ex)
  {
   System.out.println(ex);
  }
 }
}
</pre>

 <h3><a name="ClientApp" id="ClientApp">Generating clients</a></h3>

 <p>The following is a very small apllication that acts as a client
 for the previous generated clients.</p>
 <pre>
import java.rmi.Naming;
          
import vnet.remote.Host;
          
public class CheckServers
{
 public static void main(String args[])
 {
  System.out.println("This test expects to have a virtualNet called TestA, with " +
    " 4 nodes C,M,U,Y, with links between C-M, M-U, V-Y");
  if (args.length!=1)
   System.out.println("This test need an argument: The letter of the host from "+
    "where the tests are done");
  else 
   try
   {
    System.out.println("Getting the host");
    Host host=(Host) Naming.lookup("/TestA/Host"+args[0]);
    PhoneNumbersIntf phone=null;
    System.out.println("getting LMP");
    phone=(PhoneNumbersIntf)host.lookup("LMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostY/LMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostY/LMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostM/LMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostM/LMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting BELLMP");
    phone=(PhoneNumbersIntf)host.lookup("BELLMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostC/BELLMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostC/BELLMP");
    System.out.println("phone: "+phone.getNumber());
    System.out.println("getting /TestA/HostU/BELLMP");
    phone=(PhoneNumbersIntf)host.lookup("/TestA/HostU/BELLMP");
    System.out.println("phone: "+phone.getNumber());
   }
   catch(Exception ex)
   {
    System.out.println(ex);
   }
 }
}
</pre>

 <h3><a name="Execution" id="Execution">Executing the
 application</a></h3>

 <p>In the RMI remote case, there are four parts:</p>

 <ul type="square">
  <li>The RMI system</li>

  <li>The Virtual Net application</li>

  <li>One or more servers</li>

  <li>One or more clients</li>
 </ul>

 <p>First one has to compile the <em>java</em> files:</p>
 <pre>
javac PhoneNumbersIntf.java
javac PhoneNumbersServer.java
javac InsertServers.java
javac CheckServers.java
</pre>

 <p>It you get any compiler error, probably the <em>classpath</em>
 has not been properly set. In this case, go to the page on
 <a href="availability.htm">Availability</a> to know how to set it.
 Then, we start the RMI registry:</p>
 <pre>
start rmiregistry (rmiregistry &amp; in Unix)
</pre>

 <p>Now, we need to have the Virtual Net application, and to
 initialize a net called TestA that will be used by the servers and
 clients.</p>

 <p>There are several ways to execute this application. One of them
 is generating another program that creates an object
 <em>vnet.remote.VirtualNet</em>.</p>

 <p>Another way is to use one of the two programs hosted in
 <em>vnet.remote.prg</em>. We will use the graphic version:</p>
 <pre>
javaw vnet.remote.prg.GraphMain -init=+C+M+U+Y+MU1+MC2+MY3 -start TestA
</pre>

 <p>The graph of this net is:</p><img src="vnrt.jpg" class="centered">

 <p>Before executing the server or client applications, you have to
 generate the stub for the server, and its stub and skeleton:</p>
 <pre>
rmic PhoneNumbersServer
java vnet.remote.vnc PhoneNumbersServer
javac PhoneNumbersServer_Stub_VNet.java
rmic PhoneNumbersServer_Stub_VNet
</pre>

 <p>Now, it is already possible to install the servers:</p>
 <pre>
java InsertServers
</pre>

 <p>The output of this program will be:</p>
 <pre>
This test expects to have a virtualNet called TestA, with 4 nodes C,M,U,Y, with
links between C-M, M-U, V-Y
          
Getting the hosts...
Binding the servers
In M there is a server called 
In Y there is the same server ,but with a different number
In C there is a server, hosted in U, called BELLMP (/TestA/HostC/BELLMP
          
Ready
          
</pre>

 <p>Finally, we test the client:</p>
 <pre>
java CheckServers C
</pre>

 <p>The ouput is:</p>
 <pre>
This test expects to have a virtualNet called TestA, with 4 nodes C,M,U,Y, with
links between C-M, M-U, V-Y
Getting the host
getting LMP
phone: 763271
getting /TestA/HostY/LMP
phone: 859829
getting /TestA/HostM/LMP
phone: 763271
getting BELLMP
phone: 213207
getting /TestA/HostC/BELLMP
phone: 213207
getting /TestA/HostU/BELLMP
java.rmi.NotBoundException: /TestA/HostU/BELLMP
</pre>

 <h3><a name="Download" id="Download">Download the example</a></h3>

 <p><a href="vnetexrmi.zip">vnetexrmi.zip</a> (10 KB)</p>

 <p>Once unzipped this file -and having correctly set the
 <em>classpath</em>-, to execute the example is just needed to
 do:</p>
 <pre>
start rmiregistry (rmiregistry &amp; in Unix)
javaw vnet.remote.prg.GraphMain -init=+C+M+U+Y+MU1+MC2+MY3 -start TestA
start java InsertServers (java InsertServers &amp; in Unix)
java CheckServers C
</pre>
 </div>
   <div id="copyright">Copyright (c) Luis M. Pena  -  lu@coderazzi.net</div> 
  </div>
 </div>
 <script type="text/javascript" src="../js/coderazzi.js"></script>
</body>
</html>